/*
 *      Kores - Java source and Bytecode generation framework <https://github.com/JonathanxD/Kores>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2021 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.koresframework.kores.builder

// Generated by BuilderGen

/**
 * Builder pattern.
 *
 * @param T Type of element to build.
 */
interface Builder<out T, S : Builder<T, S>> {

    /**
     * Build the object of type [T].
     *
     * @return Instance of object of type [T].
     */
    fun build(): T

    /**
     * Construct the object without applying post-build transformation.
     */
    fun buildBasic(): T
}

/**
 * Cast from [Builder] of [T] of implicit type [S].
 */
@Suppress("UNCHECKED_CAST", "NOTHING_TO_INLINE")
inline fun <T, S : Builder<T, S>> Builder<T, S>.self() = this as S

/**
 * Build the object of type [T].
 *
 * @param func Consumer of builder instance.
 * @return Instance of object of type [T].
 */
@Suppress("UNCHECKED_CAST")
inline fun <T, S : Builder<T, S>> S.build(func: S.() -> Unit): T {
    func(this)
    return build()
}
