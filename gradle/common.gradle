apply plugin: 'idea'

// Programming Language
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'java'

// Documentation
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'license'
apply plugin: 'com.github.johnrengelman.shadow'

// Publish
apply plugin: 'maven-publish'

license {
    header rootProject.file("LICENSE_HEADER")
}

defaultTasks 'licenseFormat', 'build', 'test', 'jar', 'shadowJar'

sourceCompatibility = 18

def GITHUB_USERNAME = project.findProperty("USERNAME") ?: System.getenv("USERNAME")
def GITHUB_PAT = project.findProperty("TOKEN") ?: System.getenv("TOKEN")

repositories {
    mavenCentral()
    maven {
        name "gitlab-maven"
        url "https://gitlab.com/api/v4/projects/30392813/packages/maven"
    }
    maven {
        name = "JGang"
        url "https://gitlab.com/api/v4/projects/30392813/packages/maven"
    }
}

shadowJar {
    dependencies {
        include(dependency("com.github.JonathanxD:JwIUtils"))
    }
}

// Tasks
jar {
    from "$rootProject.rootDir/LICENSE"

    manifest {
        attributes 'Implementation-Title': archiveBaseName,
                'Implementation-Version': archiveVersion
    }
}

tasks.dokkaGfm.configure {
    enabled = false
    outputDirectory = rootDir.toPath().resolve("kdocs").toFile()

    dokkaSourceSets {
        named("main") {
            url = "https://github.com/koresframework/Kores/tree/version/4.0.0/src/main/kotlin"
            lineSuffix = "#L"
        }
    }
}

tasks.dokkaHtml.configure {
    outputDirectory = rootDir.toPath().resolve("dokka").toFile()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task testSourcesJar(type: Jar, dependsOn: testClasses) {
    archiveBaseName.set("test-${project.archivesBaseName}")
    archiveClassifier.set('sources')
    from sourceSets.test.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaGfm) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveBaseName.set("test-${project.archivesBaseName}")
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    archives sourcesJar
    archives javadocJar
    tests testJar
}

compileKotlin {
    kotlinOptions.jvmTarget = "18"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "18"
}

dependencies {
    api "com.github.jonathanxd:jwiutils:$iutils_version"
    api "com.github.jonathanxd:jwiutils-kt:$iutils_version"
    api "com.github.jonathanxd:specializations:$iutils_version"
    // Kotlin
    implementation "com.koresframework:generic-parser:$generic_parser_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinx_serialization_version"

    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_version"
    /*testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-hocon:$kotlinx_serialization_version"*/
    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$kotlinx_serialization_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-properties:$kotlinx_serialization_version"
    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

test {
    useJUnit()
    systemProperty "env", "gradle"
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.description = project.description
    ext.url = project.purl
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.email = 'jonathan.scripter@programmer.net'

    exclude "**/*.info"
    exclude "**/*.md"
    exclude "res/**"
    exclude "src/main/resources/**"
    exclude "src/test/resources/**"

    header rootProject.file('LICENSE_HEADER')

    sourceSets = project.sourceSets

    ignoreFailures false
    strictCheck true

    mapping {
        java = 'SLASHSTAR_STYLE'
        kt = 'SLASHSTAR_STYLE'
    }
}
